@page "/fetchdata"
@using LinkSammlungWebApp.Data
@using System.Text.Json
@using System.Net.Http
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@using System.Text
@inject HttpClient http

<link rel="stylesheet" href="css/styles.css" />

<PageTitle>Add Link</PageTitle>
<h1>Add Links</h1>

<div class="page">
    <main>
        <article class="content px-4">
            <input @bind="links.linkName" type="text" placeholder="Titel" />
            <br />
            <textarea @bind="links.linkURL" type="text" placeholder="Inhalt" />
            <br />
            <button @onclick="@(() => CreateLink())">Add Note</button>
            <br />
            <br />
            <button @onclick="@(() => GetStatus())">Status</button>
        </article>
    </main>
</div>

@code {
    Linksammlung links = new Linksammlung();
    List<Linksammlung> listLink = new List<Linksammlung>();
    string errorMessage = "";
    string statusMessage = "";
    private async Task CreateLink()
    {
        try
        {
            HttpClient client = new HttpClient();
            string data = await client.GetStringAsync("http://localhost:3002/Link");
            var list = JsonSerializer.Deserialize<List<Linksammlung>>(data);

            if (list != null)
            {
                if (IsValidUrl(links.linkURL))
                {
                    var noteJson = JsonSerializer.Serialize(links);
                    var requestContent = new StringContent(noteJson, Encoding.UTF8, "application/json");

                    var response = await client.PostAsync("http://localhost:3002/addLink", requestContent);
                }
                else
                {
                    errorMessage = "Invalid link URL";
                    await JSRuntime.InvokeVoidAsync("alert", errorMessage);
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while creating a link: {ex.Message}";
            await JSRuntime.InvokeVoidAsync("alert", errorMessage);
        }

        links.linkName = "";
        links.linkURL = "";
    }

    private bool IsValidUrl(string url)
    {
        return Uri.TryCreate(url, UriKind.Absolute, out Uri uriResult) &&
        (uriResult.Scheme == Uri.UriSchemeHttp || uriResult.Scheme == Uri.UriSchemeHttps);
    }

    public async Task<string> GetStatus()
    {
        try
        {
            var httpClient = new HttpClient();
            var response = await httpClient.GetAsync("http://localhost:3002/status");

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                statusMessage = "Server ist erreichbar";

                await JSRuntime.InvokeVoidAsync("alert", statusMessage);
                return responseContent;
            }
            else{
                return "Error: " + response.StatusCode.ToString();
            }
        }
        catch (Exception ex)
        {
            return "Exception: " + ex.Message;
        }
    }


}
