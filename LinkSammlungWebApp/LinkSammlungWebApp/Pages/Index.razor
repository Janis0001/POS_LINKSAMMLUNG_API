@page "/"
@using LinkSammlungWebApp.Data
@using System.Net.Http
@inject HttpClient http
@using System.Text.Json;
@using Microsoft.JSInterop;
@using System.Text;
@using System.Diagnostics;

    <h3 class="p-3 text-center">Blazor WebAssembly - Display a list of items</h3>
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th>Name</th>
                <th>URL</th>
                <th>Erstellung</th>
            </tr>
        </thead>
        <tbody>
            @if (links != null)
            {
            @foreach (Linksammlung link in links)
            {
                <tr>
                    <td>
                        @if (!taged || linkHelp != link)
                        {
                            @link.linkName
                        }
                        else
                        {
                            <input @bind="link.linkName" />
                        }
                    </td>
                    <td>
                        @if (!taged)
                        {
                            <a href="@link.linkURL">@link.linkURL</a>
                        }
                        else
                        {
                            <input href="@link.linkURL" @bind="link.linkURL" />
                        }
                    </td>
                    <td>@link.erstellung</td>
                </tr>
                <button @onclick="@(() => DeleteLink(link))">Delete</button>
                <button @onclick="@(() => editLink(link))">Edit</button>

                @if (taged)
                {
                    <button @onclick="@(() => saveEdited())">Save</button>
                }
            }

            }
        </tbody>
    </table>

@code {
    List<Linksammlung> links = new List<Linksammlung>();
    List<String> linkEdited = new List<String>();
    Linksammlung linkHelp = new Linksammlung();
    bool taged = false;
    String newText = "";
    protected override async Task OnInitializedAsync()
    {
        try
        {
            string data = await http.GetStringAsync("http://localhost:3002/Link");
            links = JsonSerializer.Deserialize<List<Linksammlung>>(data);
        }
        catch
        {

        }
    }


    public async Task DeleteLink(Linksammlung link)
    {
        try
        {
            if (link != null)
            {
                var httpClient = new HttpClient { BaseAddress = new Uri("http://localhost:3002") };

                var response = await httpClient.DeleteAsync("deleteLink/" + link.id);

                if (response.IsSuccessStatusCode)
                {
                    links.Remove(link);
                }
                else
                {

                }
            }
        }
        catch (Exception ex)
        {
            // Handle the exception appropriately
        }
    }


    public async void editLink(Linksammlung link)
    {
        try{
             taged = true;

             linkHelp = link;
             link.linkName = "";
             link.linkURL = "";
             taged = true; 
        }
        catch
        {

        }
    }

    public async void saveEdited()
    {
        taged = false; 
        
        if (!string.IsNullOrWhiteSpace(linkHelp.linkName) && !string.IsNullOrWhiteSpace(linkHelp.linkURL))
            {
                linkHelp.linkName = linkHelp.linkName.Trim();
                linkHelp.linkURL = linkHelp.linkURL.Trim();

                var noteJson = JsonSerializer.Serialize(linkHelp);
                var requestContent = new StringContent(noteJson, Encoding.UTF8, "application/json");
                var response = http.PutAsync("http://localhost:3002/editLink/" + linkHelp.id, requestContent);

            }
    }
}